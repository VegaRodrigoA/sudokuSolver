package sudoku2;

/**
 *
 * @author Usuario
 */
public class Sudoku2 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int[][] board ={{1,0,0,0,0,0,0,0,0},
                        {0,0,0,1,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0},
                        {0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0},
                        {0,0,1,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0}};
        
        if(iniValidator(board)){
            if(solve(board)){
                System.out.println("SUDOKU SOLVED!!");
                for(int row=0;row<9;row++){
                    for(int col=0;col<9;col++){
                        System.out.print(board[row][col]);
                    }
                    System.out.println();
                }
            }else{
                System.out.println("Sudoku is not solvable");
            }
        } else{
            System.out.println("Sudoku initial values are invalid");
        }
        
        
    }
    
    static boolean iniValidRow(int[][] board){
       //Check if there is a value twice
       int control =0;
       for (int row = 0; row<9;row++){
           for(int number = 1; number<10;number++){
               control =0;
               for (int i =0;i<9;i++){
                   if((board[row][i]>9)||(board[row][i]<0)){
                       return false;
                   }
                   if (number == board[row][i]){
                       control++;
                       if (control > 1){
                            return false;
                       }
                    }
               }
                
       
   }
       }
       
       return true;
   }
   
   static boolean iniValidCol(int[][] board){
       //Check if a value exists twice or more in a column
       int control =0;
       for (int col = 0; col<9;col++){
           for(int number = 1; number<10;number++){
               control =0;
               for (int i =0;i<9;i++){
                   if (number == board[i][col]){
                       control++;
                       if (control > 1){
                            return false;
                       }
                    }
               }
                
            }
       }
       
       return true;
   }
   
   static boolean iniValidBox(int[][] board){
        //Check if the value exists more than once in grid 3*3
        int[] firstRow = {0,3,6};
        int[] firstCol = {0,3,6};
        int control = 0;

        for(int fRowIt: firstRow){//define the first row iterator, that iterates 
            //through the posible values of first row
            for(int fColIt: firstCol){//First column to iterate
                int lastRow = fRowIt +3;
                int lastCol = fColIt +3;
                
                for(int number = 1;number <10;number++){//Checks from 1 to 9
                    control =0;
                    for(int r = fRowIt; r < lastRow; r++){
                        for(int c = fColIt; c<lastCol;c++){
                            if (number==board[r][c]){
                                control++;
                                if (control>1){
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
   }
   
   static boolean iniValidator(int[][] board){
       return (iniValidCol(board) && 
               iniValidRow(board)&&
               iniValidBox(board));
   }
    
    
   static boolean validRow(int[][] board, int row,int number){
       //Check if the value exists in row
       for(int i = 0; i<9;i++){
       if (number == board[row][i]){
           return false;
       }
       
   }
       return true;
   }
   
   static boolean validCol(int[][] board, int col,int number){
       //Check if the value exists in column
       for(int i = 0; i<9;i++){
       if (number == board[i][col]){
           return false;
       }
       
   }
       return true;
   }
   
   static boolean validBox(int[][] board, int row, int col,int number){
       //Check if the value exists in grid 3*3
       int firstRow = (row /3)*3;
       int firstCol = (col/3)*3;
       int lastRow = firstRow +3;
       int lastCol = firstCol +3;
       
       for(int r = firstRow; r < lastRow; r++){
           for(int c = firstCol; c<lastCol;c++){
               if (number==board[r][c]){
                   return false;
               }
           }
       }
       
       return true;
   }
   
   static boolean validator(int[][] board, int row, int col, int number){
       return (validCol(board,col,number) && 
               validRow(board,row,number)&&
               validBox(board,row,col,number));
   }
   
   static boolean solve(int[][] board){
    //if (iniValidator(board)){
         for(int row=0;row<9;row++){
              for(int col=0;col<9;col++){
                  if (board[row][col]==0){
                      for(int i =1;i<10;i++){
                          if(validator(board,row,col,i)){
                              board[row][col]=i;
                              if (solve(board)){
                                  return true;
                              }   
                              board[row][col]=0;

                          }
                      }
                      return false;
              }
          }
     }
     return true;    

     
}
}
